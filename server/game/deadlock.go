package game

import (
    "fmt"
    "runtime"
    "time"
)

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
type DeadlockDetector struct {
    lastBroadcast time.Time
    threshold     time.Duration
}

func NewDeadlockDetector() *DeadlockDetector {
    return &DeadlockDetector{
        threshold: 10 * time.Second,
    }
}

func (d *DeadlockDetector) Check() {
    if time.Since(d.lastBroadcast) > d.threshold {
        fmt.Printf("üö® DEADLOCK DETECTED: No broadcast for %v\n", time.Since(d.lastBroadcast))
        
        // –ü–µ—á–∞—Ç–∞–µ–º stack trace –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
        buf := make([]byte, 1<<20)
        stackLen := runtime.Stack(buf, true)
        fmt.Printf("=== ALL GOROUTINE STACKS ===\n%s\n=== END STACKS ===\n", buf[:stackLen])
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        d.lastBroadcast = time.Now()
    }
}

func (d *DeadlockDetector) UpdateBroadcast() {
    d.lastBroadcast = time.Now()
}