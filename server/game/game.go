package game

import (
	"fmt"
	"math"
	"math/rand"
	"sync"
	"time"

	"github.com/gorilla/websocket"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const (
	PlayerRadius    = 15.0
	CollisionBuffer = 5.0
)

// GameMessage ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º
type GameMessage struct {
	Type string      `json:"type"`
	Data interface{} `json:"data,omitempty"`
}

// Portal ‚Äî –ø–æ—Ä—Ç–∞–ª –º–µ–∂–¥—É –∑–æ–Ω–∞–º–∏
type Portal struct {
	ID   string
	X    float64
	Y    float64
	To   string // ID –ø–æ—Ä—Ç–∞–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
	Zone string
}

// Zone ‚Äî –∏–≥—Ä–æ–≤–∞—è –∑–æ–Ω–∞
type Zone struct {
	Name  string
	MinX  float64
	MaxX  float64
	MinY  float64
	MaxY  float64
	Color string
}

// Game ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä
type Game struct {
	mu      sync.RWMutex // üîë –û–î–ò–ù –ú–¨–Æ–¢–ï–ö–° –ù–ê –í–°–Å
	players map[string]*Player
	mobs    map[string]*Mob

	connections map[string]*websocket.Conn // –ø—Ä—è–º—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	portals     map[string]*Portal
	zones       map[string]*Zone
	worldWidth  float64
	worldHeight float64
	colors      []string

	petalDrops map[string]*PetalDrop // –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ
	petals     map[string]*Petal     // –ò —ç—Ç–æ
}

// NewGame —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä
func NewGame() *Game {
	g := &Game{
		players:     make(map[string]*Player),
		mobs:        make(map[string]*Mob),
		connections: make(map[string]*websocket.Conn),
		portals:     make(map[string]*Portal),
		zones:       make(map[string]*Zone),
		colors:      []string{"#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98FB98", "#FFD700"},

		petalDrops: make(map[string]*PetalDrop),
		petals:     make(map[string]*Petal),
	}

	g.initZones()
	g.initPortals()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ —Ü–∏–∫–ª—ã
	go g.synchronizeGameState()
	go g.mobBehaviorLoop()
	go g.mobSpawnLoop()
	go g.collisionLoop()
	go g.petalSystemLoop()

	return g
}

func (g *Game) collisionLoop() {
	ticker := time.NewTicker(100 * time.Millisecond) // 10 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
	defer ticker.Stop()

	for range ticker.C {
		g.checkCollisions()
	}
}

// initZones ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω
func (g *Game) initZones() {
	g.zones["common"] = &Zone{MinX: 0, MaxX: 6000, MinY: 0, MaxY: 3000, Color: "#666666"}
	g.zones["uncommon"] = &Zone{MinX: 7000, MaxX: 13000, MinY: 0, MaxY: 3000, Color: "#00FF00"}
	g.zones["rare"] = &Zone{MinX: 14000, MaxX: 20000, MinY: 0, MaxY: 3000, Color: "#0088FF"}
	g.zones["epic"] = &Zone{MinX: 21000, MaxX: 27000, MinY: 0, MaxY: 3000, Color: "#FF00FF"}
	g.zones["legendary"] = &Zone{MinX: 28000, MaxX: 34000, MinY: 0, MaxY: 3000, Color: "#FFAA00"}

	g.worldWidth = 34000.0
	g.worldHeight = 3000.0
	fmt.Println("‚úÖ Zones initialized")
}

// initPortals ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç–∞–ª–æ–≤
func (g *Game) initPortals() {
	portals := []*Portal{
		{"P1", 5800, 1500, "P2", "common"},
		{"P2", 7200, 1500, "P1", "uncommon"},
		{"P3", 12800, 1500, "P4", "uncommon"},
		{"P4", 14200, 1500, "P3", "rare"},
		{"P5", 19800, 1500, "P6", "rare"},
		{"P6", 21200, 1500, "P5", "epic"},
		{"P7", 26800, 1500, "P8", "epic"},
		{"P8", 28200, 1500, "P7", "legendary"},
	}

	for _, p := range portals {
		g.portals[p.ID] = p
	}
	fmt.Println("‚úÖ Portals initialized")
}

// AddPlayer ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
func (g *Game) AddPlayer(conn *websocket.Conn, userID, username string) *Player {
	g.mu.Lock()
	defer g.mu.Unlock()

	playerID := fmt.Sprintf("p_%d", time.Now().UnixNano())
	spawnX, spawnY := g.findSafeSpawnPosition("common", playerID)
	color := g.colors[rand.Intn(len(g.colors))]

	player := NewPlayer(playerID, userID, username, spawnX, spawnY, color)
	player.CurrentZone = "common"

	g.players[playerID] = player
	g.connections[playerID] = conn

	fmt.Printf("üÜï Player %s joined\n", playerID)
	return player
}

// RemovePlayer ‚Äî —É–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞
func (g *Game) RemovePlayer(playerID string) {
	g.mu.Lock()
	defer g.mu.Unlock()

	if conn, ok := g.connections[playerID]; ok {
		conn.Close()
		delete(g.connections, playerID)
	}
	delete(g.players, playerID)
	fmt.Printf("üëã Player %s left\n", playerID)
}

// MovePlayer ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
func (g *Game) MovePlayer(playerID string, dx, dy float64) {
	g.mu.Lock()
	defer g.mu.Unlock()

	player := g.players[playerID]
	if player == nil {
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è
	length := math.Sqrt(dx*dx + dy*dy)
	if length > 0 {
		dx /= length
		dy /= length
	}

	newX := player.X + dx*player.Speed
	newY := player.Y + dy*player.Speed

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–æ–Ω–æ–π
	newX, newY = g.constrainToZone(player, newX, newY)

	// –ò–∑–±–µ–≥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
	for _, other := range g.players {
		if other.ID == playerID {
			continue
		}
		px, py := newX, newY
		ox, oy := other.X, other.Y
		dx := px - ox
		dy := py - oy
		distSq := dx*dx + dy*dy
		minDist := player.Radius + other.Radius + CollisionBuffer
		if distSq < minDist*minDist {
			// –û—Ç—Ç–∞–ª–∫–∏–≤–∞–µ–º
			angle := math.Atan2(dy, dx)
			pushX := ox + math.Cos(angle)*minDist
			pushY := oy + math.Sin(angle)*minDist
			// –ü–ª–∞–≤–Ω–æ–µ —Å–º–µ—à–∏–≤–∞–Ω–∏–µ
			newX = newX*0.7 + pushX*0.3
			newY = newY*0.7 + pushY*0.3
		}
	}

	player.X = newX
	player.Y = newY
	g.checkPortalInteraction(player)
}

// constrainToZone ‚Äî –Ω–µ –¥–∞—ë—Ç –≤—ã–π—Ç–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∑–æ–Ω—ã
func (g *Game) constrainToZone(player *Player, x, y float64) (float64, float64) {
	zone := g.zones[player.CurrentZone]
	if zone == nil {
		// –ï—Å–ª–∏ –∑–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ common
		player.CurrentZone = "common"
		zone = g.zones["common"]
	}

	if x < zone.MinX {
		x = zone.MinX
	}
	if x > zone.MaxX {
		x = zone.MaxX
	}
	if y < zone.MinY {
		y = zone.MinY
	}
	if y > zone.MaxY {
		y = zone.MaxY
	}

	return x, y
}

// checkPortalInteraction ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
func (g *Game) checkPortalInteraction(player *Player) {
	if time.Now().Before(player.PortalCooldown) {
		return
	}

	for _, portal := range g.portals {
		dx := player.X - portal.X
		dy := player.Y - portal.Y
		if dx*dx+dy*dy <= 100*100 { // —Ä–∞–¥–∏—É—Å 100 (–±–µ–∑ sqrt!)
			g.teleportPlayer(player, portal)
			break
		}
	}
}

// teleportPlayer ‚Äî —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–∫–∞
func (g *Game) teleportPlayer(player *Player, fromPortal *Portal) {
	toPortal := g.portals[fromPortal.To]
	if toPortal == nil {
		return
	}

	player.X = toPortal.X
	player.Y = toPortal.Y
	player.CurrentZone = toPortal.Zone
	player.PortalCooldown = time.Now().Add(10 * time.Second)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	notif := map[string]interface{}{
		"type": "portal_teleport",
		"data": map[string]interface{}{
			"fromZone": fromPortal.Zone,
			"toZone":   toPortal.Zone,
		},
	}
	if conn, ok := g.connections[player.ID]; ok {
		conn.WriteJSON(notif)
	}

	fmt.Printf("üåÄ %s teleported to %s zone\n", player.ID, toPortal.Zone)
}

// findSafeSpawnPosition ‚Äî –∏—â–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ø–∞–≤–Ω–∞
func (g *Game) findSafeSpawnPosition(zoneName, excludeID string) (float64, float64) {
	zone := g.zones[zoneName]
	for i := 0; i < 20; i++ {
		x := zone.MinX + rand.Float64()*(zone.MaxX-zone.MinX)
		y := zone.MinY + rand.Float64()*(zone.MaxY-zone.MinY)

		safe := true
		for _, p := range g.players {
			if p.ID == excludeID {
				continue
			}
			dx := x - p.X
			dy := y - p.Y
			if dx*dx+dy*dy < (p.Radius*3)*(p.Radius*3) {
				safe = false
				break
			}
		}
		if safe {
			return x, y
		}
	}
	// fallback
	return (zone.MinX + zone.MaxX) / 2, (zone.MinY + zone.MaxY) / 2
}

// synchronizeGameState ‚Äî —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∂–¥—ã–µ 16 –º—Å
func (g *Game) synchronizeGameState() {
	ticker := time.NewTicker(16 * time.Millisecond)
	defer ticker.Stop()

	for range ticker.C {
		g.broadcastGameState()
	}
}

func (g *Game) broadcastGameState() {
	g.mu.RLock()
	defer g.mu.RUnlock()

	for playerID, conn := range g.connections {
		player := g.players[playerID]
		if player == nil {
			continue
		}

		zone := player.CurrentZone
		if zone == "" {
			zone = "common"
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–æ–Ω–µ (—Ç–µ–ø–µ—Ä—å —Å –ø–µ—Ç–∞–ª–∞–º–∏)
		playersInZone, mobsInZone := g.filterByZone(zone)

		petalDropsInZone := make(map[string]*PetalDrop)
		for id, drop := range g.petalDrops {
			if drop.Zone == zone {
				petalDropsInZone[id] = drop
			}
		}

		// –ü–µ—Ç–∞–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
		playerPetals := make(map[string]*Petal)
		if player.Petals != nil {
			for id, petal := range player.Petals {
				playerPetals[id] = &Petal{
					ID:        petal.ID,
					Type:      petal.Type,
					Health:    petal.Health,
					MaxHealth: petal.MaxHealth,
					X:         petal.X,
					Y:         petal.Y,
					IsActive:  petal.IsActive,
				}
			}
		}

		state := map[string]interface{}{
			"type":        "state",
			"players":     playersInZone, // ‚Üê –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ç–∞–ª—ã –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ –∑–æ–Ω–µ
			"mobs":        mobsInZone,
			"yourId":      playerID,
			"worldWidth":  g.worldWidth,
			"worldHeight": g.worldHeight,
			"yourZone":    zone,
			"petalDrops":  petalDropsInZone,
			"petals":      playerPetals, // ‚Üê –ü–µ—Ç–∞–ª—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
		}

		_ = conn.WriteJSON(state)
	}
}

// mobSpawnLoop ‚Äî —Å–ø–∞–≤–Ω–∏—Ç –º–æ–±–æ–≤ —Ä–∞–∑ –≤ 5 —Å–µ–∫
func (g *Game) mobSpawnLoop() {
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		g.spawnMobsIfNeeded()
	}
}

// spawnMobsIfNeeded ‚Äî —Å–ø–∞–≤–Ω–∏—Ç –º–æ–±–æ–≤, –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ
func (g *Game) spawnMobsIfNeeded() {
	g.mu.Lock()
	defer g.mu.Unlock()

	maxMobsPerZone := 40
	mobCount := make(map[string]int)
	for _, mob := range g.mobs {
		mobCount[mob.Zone]++
	}

	mobTypes := []MobType{MobTypeOrc, MobTypeWolf, MobTypeGoblin}

	for zoneName, zone := range g.zones {
		current := mobCount[zoneName]
		if current >= maxMobsPerZone {
			continue
		}

		need := maxMobsPerZone - current
		spawned := 0
		attempts := 0
		maxAttempts := need * 5

		for spawned < need && attempts < maxAttempts {
			attempts++
			mobType := mobTypes[rand.Intn(len(mobTypes))]
			count := rand.Intn(3) + 1
			if spawned+count > need {
				count = need - spawned
			}

			for i := 0; i < count; i++ {
				x := zone.MinX + rand.Float64()*(zone.MaxX-zone.MinX)
				y := zone.MinY + rand.Float64()*(zone.MaxY-zone.MinY)

				// –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞–ª–µ–∫–æ –ª–∏ –æ—Ç –∏–≥—Ä–æ–∫–æ–≤?
				safe := true
				for _, p := range g.players {
					dx := x - p.X
					dy := y - p.Y
					if dx*dx+dy*dy < 200*200 { // 200px –æ—Ç –∏–≥—Ä–æ–∫–∞
						safe = false
						break
					}
				}

				if safe {
					mobID := fmt.Sprintf("mob_%s_%d", zoneName, time.Now().UnixNano())
					mob := NewMob(mobID, mobType, x, y, zoneName)
					g.mobs[mobID] = mob
					spawned++
				}
			}
		}
	}
}

// mobBehaviorLoop ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–±–æ–≤
func (g *Game) mobBehaviorLoop() {
	ticker := time.NewTicker(100 * time.Millisecond)
	defer ticker.Stop()

	for range ticker.C {
		g.UpdateMobs() // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ UpdateMobs –∏—Å–ø–æ–ª—å–∑—É–µ—Ç g.mu
	}
}

// GetGameState ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
func (g *Game) GetGameState(playerID string) map[string]interface{} {
	g.mu.RLock()
	defer g.mu.RUnlock()

	player := g.players[playerID]
	if player == nil {
		return nil
	}

	zone := player.CurrentZone
	if zone == "" {
		zone = "common"
	}

	playersInZone, mobsInZone := g.filterByZone(zone)

	return map[string]interface{}{
		"type":        "state",
		"players":     playersInZone,
		"mobs":        mobsInZone,
		"yourId":      playerID,
		"worldWidth":  g.worldWidth,
		"worldHeight": g.worldHeight,
		"yourZone":    zone,
	}
}

// filterByZone ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–¥ RLock)
func (g *Game) filterByZone(zone string) (map[string]*Player, map[string]*Mob) {
	players := make(map[string]*Player)
	for id, p := range g.players {
		if p.CurrentZone == zone {
			players[id] = &Player{
				ID:        p.ID,
				UserID:    p.UserID,
				Username:  p.Username,
				X:         p.X,
				Y:         p.Y,
				Color:     p.Color,
				Speed:     p.Speed,
				Radius:    p.Radius,
				Health:    p.Health,
				MaxHealth: p.MaxHealth,
				Petals:    p.GetPetalsForSerialization(),
			}
		}
	}

	mobs := make(map[string]*Mob)
	for id, m := range g.mobs {
		if m.Zone == zone {
			mobs[id] = &Mob{
				ID:        m.ID,
				Type:      m.Type,
				Rarity:    m.Rarity,
				Health:    m.Health,
				MaxHealth: m.MaxHealth,
				Damage:    m.Damage,
				Speed:     m.Speed,
				X:         m.X,
				Y:         m.Y,
				Zone:      m.Zone,
				Radius:    m.Radius,
			}
		}
	}
	return players, mobs
}

func (g *Game) checkCollisions() {
	g.mu.Lock()
	defer g.mu.Unlock()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
	players := make([]*Player, 0, len(g.players))
	for _, p := range g.players {
		players = append(players, p)
	}

	mobs := make([]*Mob, 0, len(g.mobs))
	for _, m := range g.mobs {
		mobs = append(mobs, m)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –º–æ–±–∞–º–∏
	for _, player := range players {
		if !player.IsAlive() {
			continue
		}

		for _, mob := range mobs {
			if !mob.IsAlive() || mob.Zone != player.CurrentZone {
				continue
			}

			distance := player.DistanceTo(mob.X, mob.Y)
			collisionDistance := player.Radius + mob.Radius

			if distance < collisionDistance {
				g.handlePlayerMobCollision(player, mob)
			}
		}
	}

	// –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö –º–æ–±–æ–≤
	g.removeDeadMobs()
}

// handlePlayerMobCollision –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–ª–∏–∑–∏—é –∏–≥—Ä–æ–∫–∞ –∏ –º–æ–±–∞
func (g *Game) handlePlayerMobCollision(player *Player, mob *Mob) {
	// –ú–æ–± –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞
	if mob.CanAttack() {
		if player.TakeDamageFromMob(mob.Damage) {
			mob.MarkAttack()

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
			g.sendDamageNotification(player, mob.Damage)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
			if !player.IsAlive() {
				g.handlePlayerDeath(player)
			}
		}
	}

	// –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –º–æ–±–∞ (–∫–æ–ª–ª–∏–∑–∏–µ–π)
	if player.CanAttack() {
		mob.TakeDamage(player.CollisionDamage)
		player.MarkAttack()

		// –ï—Å–ª–∏ –º–æ–± —É–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if !mob.IsAlive() {
			var petalType PetalType
			switch mob.Type {
			case MobTypeWolf:
				petalType = PetalTypeWolf
			case MobTypeGoblin:
				petalType = PetalTypeGoblin
			case MobTypeOrc:
				petalType = PetalTypeOrc
			default:
				petalType = PetalTypeGoblin // fallback
			}

			// –°–æ–∑–¥–∞–µ–º –¥—Ä–æ–ø –ª–µ–ø–µ—Å—Ç–∫–∞
			g.createPetalDrop(player.ID, petalType, mob.X, mob.Y)
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
			g.sendMobDeathNotification(player, mob)
		}
	}
}

func (g *Game) createPetalDrop(playerID string, petalType PetalType, x, y float64) {
	player := g.players[playerID]
	if player == nil {
		return
	}

	drop := &PetalDrop{
		ID:       fmt.Sprintf("drop_%d", time.Now().UnixNano()),
		Type:     petalType,
		X:        x,
		Y:        y,
		OwnerID:  playerID,
		Zone:     player.CurrentZone, // ‚Üê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–æ–Ω—É
		Created:  time.Now(),
		Lifetime: 30 * time.Second,
	}

	g.petalDrops[drop.ID] = drop

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if conn, ok := g.connections[playerID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "petal_drop_created",
			"data": map[string]interface{}{
				"id":   drop.ID,
				"type": drop.Type,
				"x":    drop.X,
				"y":    drop.Y,
			},
		})
	}
}

// handlePlayerDeath –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞
func (g *Game) handlePlayerDeath(player *Player) {
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏
	g.sendDeathNotification(player)
	player.RemoveAllPetals()
	// –ò–≥—Ä–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∏–≥—Ä–µ, –Ω–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è "–º–µ—Ä—Ç–≤—ã–º"
	// –û–Ω –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è
	// –í –±—É–¥—É—â–µ–º –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –≤–æ—Å–∫—Ä–µ—à–∞—Ç—å –µ–≥–æ
}

// removeDeadMobs —É–¥–∞–ª—è–µ—Ç –º–µ—Ä—Ç–≤—ã—Ö –º–æ–±–æ–≤
func (g *Game) removeDeadMobs() {
	deadMobs := make([]string, 0)

	for id, mob := range g.mobs {
		if !mob.IsAlive() {
			deadMobs = append(deadMobs, id)
		}
	}

	for _, id := range deadMobs {
		delete(g.mobs, id)
		fmt.Printf("‚ò†Ô∏è Mob %s died and removed\n", id)
	}
}

// sendDamageNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞
func (g *Game) sendDamageNotification(player *Player, damage int) {
	if conn, ok := g.connections[player.ID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "damage_taken",
			"data": map[string]interface{}{
				"damage":     damage,
				"health":     player.Health,
				"max_health": player.MaxHealth,
			},
		})
	}
}

// sendDeathNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏
func (g *Game) sendDeathNotification(player *Player) {
	if conn, ok := g.connections[player.ID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "player_died",
			"data": map[string]interface{}{
				"health": player.Health,
			},
		})
	}
}

// sendMobDeathNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ—Ä—Ç–∏ –º–æ–±–∞
func (g *Game) sendMobDeathNotification(player *Player, mob *Mob) {
	if conn, ok := g.connections[player.ID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "mob_killed",
			"data": map[string]interface{}{
				"mob_type": mob.Type,
				"rarity":   mob.Rarity,
				"xp":       mob.MaxHealth / 2, // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –æ–ø—ã—Ç–∞
			},
		})
	}
}

// RespawnPlayer –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–∞
func (g *Game) RespawnPlayer(playerID string) {
	g.mu.Lock()
	defer g.mu.Unlock()

	player := g.players[playerID]
	if player == nil || player.IsAlive() {
		return
	}

	// –ù–∞—Ö–æ–¥–∏–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—è
	x, y := g.findSafeSpawnPosition("common", playerID)
	player.Respawn(x, y)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–∏
	if conn, ok := g.connections[playerID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "player_respawned",
			"data": map[string]interface{}{
				"health": player.Health,
				"x":      player.X,
				"y":      player.Y,
				"zone":   player.CurrentZone,
			},
		})
	}

	fmt.Printf("üîÅ Player %s respawned at (%.1f, %.1f)\n", playerID, x, y)
}

// GetPlayersCount ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤
func (g *Game) GetPlayersCount() int {
	g.mu.RLock()
	defer g.mu.RUnlock()
	return len(g.players)
}

func (g *Game) petalSystemLoop() {
	ticker := time.NewTicker(100 * time.Millisecond)
	defer ticker.Stop()

	for range ticker.C {
		g.updatePetals()
		g.checkPetalDrops()
		g.checkPetalCollisions()
		g.checkPetalHealing()
	}
}

func (g *Game) updatePetals() {
	g.mu.Lock()
	defer g.mu.Unlock()

	deltaTime := 0.1 // 100ms –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

	for _, player := range g.players {
		for _, petal := range player.Petals {
			if petal.IsActive {
				// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ª–µ–ø–µ—Å—Ç–∫–∞
				petalX, petalY := petal.UpdatePosition(player.X, player.Y, deltaTime)

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ–ª–ª–∏–∑–∏–π
				petal.X = petalX
				petal.Y = petalY
			}
		}
	}
}

func (g *Game) checkPetalDrops() {
	g.mu.Lock()
	defer g.mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥—Ä–æ–ø—ã
	expiredDrops := make([]string, 0)
	for id, drop := range g.petalDrops {
		if drop.IsExpired() {
			expiredDrops = append(expiredDrops, id)
		}
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥—Ä–æ–ø—ã
	for _, id := range expiredDrops {
		delete(g.petalDrops, id)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–±–æ—Ä –¥—Ä–æ–ø–æ–≤ –∏–≥—Ä–æ–∫–∞–º–∏
	for _, player := range g.players {
		for _, drop := range g.petalDrops {
			if drop.CanBePickedBy(player.ID) && player.IsAlive() {
				distance := player.DistanceTo(drop.X, drop.Y)
				if distance < 50 { // –†–∞–¥–∏—É—Å –ø–æ–¥–±–æ—Ä–∞
					g.pickUpPetal(player, drop)
					break
				}
			}
		}
	}
}

func (g *Game) pickUpPetal(player *Player, drop *PetalDrop) {
	// –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–ø–µ—Å—Ç–æ–∫ –∏–≥—Ä–æ–∫—É
	player.AddPetal(drop.Type)

	// –£–¥–∞–ª—è–µ–º –¥—Ä–æ–ø
	delete(g.petalDrops, drop.ID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	if conn, ok := g.connections[player.ID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "petal_picked_up",
			"data": map[string]interface{}{
				"type": drop.Type,
			},
		})
	}

	fmt.Printf("üéØ Player %s picked up %s petal\n", player.ID, drop.Type)
}

func (g *Game) checkPetalCollisions() {
	g.mu.Lock()
	defer g.mu.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ª–µ–ø–µ—Å—Ç–∫–æ–≤ —Å –º–æ–±–∞–º–∏
	for _, player := range g.players {
		activePetals := player.GetActivePetals()

		for _, petal := range activePetals {
			for _, mob := range g.mobs {
				if !mob.IsAlive() || mob.Zone != player.CurrentZone {
					continue
				}

				distance := math.Sqrt(math.Pow(petal.X-mob.X, 2) + math.Pow(petal.Y-mob.Y, 2))
				collisionDistance := 10.0 + mob.Radius // –†–∞–¥–∏—É—Å –ª–µ–ø–µ—Å—Ç–∫–∞ + –º–æ–±–∞

				if distance < collisionDistance {
					g.handlePetalMobCollision(petal, mob)
				}
			}
		}
	}
}

func (g *Game) handlePetalMobCollision(petal *Petal, mob *Mob) {
	// –õ–µ–ø–µ—Å—Ç–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –º–æ–±–∞
	if petal.CanAttack() {
		mob.TakeDamage(petal.Damage)
		petal.LastAttack = time.Now()

		// –ï—Å–ª–∏ –º–æ–± —É–º–µ—Ä, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∏–ª–ª –∏–≥—Ä–æ–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –¥—Ä–æ–ø
		if !mob.IsAlive() {
			// –ù–∞—Ö–æ–¥–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–µ–ø–µ—Å—Ç–∫–∞
			player := g.players[petal.OwnerID]
			if player != nil {
				// –°–æ–∑–¥–∞–µ–º –¥—Ä–æ–ø –ª–µ–ø–µ—Å—Ç–∫–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
				var petalType PetalType
				switch mob.Type {
				case MobTypeWolf:
					petalType = PetalTypeWolf
				case MobTypeGoblin:
					petalType = PetalTypeGoblin
				case MobTypeOrc:
					petalType = PetalTypeOrc
				default:
					petalType = PetalTypeGoblin // fallback
				}

				g.createPetalDrop(petal.OwnerID, petalType, mob.X, mob.Y)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–±–∏–π—Å—Ç–≤–µ
				g.sendMobDeathNotification(player, mob)
			}

			// –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É–±–∏–π—Å—Ç–≤–µ –ø–µ—Ç–∞–ª–æ–º
			if conn, ok := g.connections[petal.OwnerID]; ok {
				conn.WriteJSON(map[string]interface{}{
					"type": "mob_killed_by_petal",
					"data": map[string]interface{}{
						"mob_type":   mob.Type,
						"petal_type": petal.Type,
						"xp":         mob.MaxHealth / 2, // –¢–∞ –∂–µ —Ñ–æ—Ä–º—É–ª–∞ –æ–ø—ã—Ç–∞
					},
				})
			}
		}
	}

	// –ú–æ–± –∞—Ç–∞–∫—É–µ—Ç –ª–µ–ø–µ—Å—Ç–æ–∫
	if mob.CanAttack() {
		petal.TakeDamage(mob.Damage)
		mob.MarkAttack()

		// –ï—Å–ª–∏ –ª–µ–ø–µ—Å—Ç–æ–∫ —É–Ω–∏—á—Ç–æ–∂–µ–Ω
		if !petal.IsActive {
			g.handlePetalDestroyed(petal)
		}
	}
}

func (g *Game) handlePetalDestroyed(petal *Petal) {
	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	go func() {
		time.Sleep(2 * time.Second)
		g.mu.Lock()
		defer g.mu.Unlock()

		if player, ok := g.players[petal.OwnerID]; ok {
			if existingPetal, ok := player.Petals[petal.ID]; ok {
				existingPetal.Respawn()

				// –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
				if conn, ok := g.connections[petal.OwnerID]; ok {
					conn.WriteJSON(map[string]interface{}{
						"type": "petal_respawned",
						"data": map[string]interface{}{
							"petal_id": petal.ID,
							"type":     petal.Type,
						},
					})
				}
			}
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
	if conn, ok := g.connections[petal.OwnerID]; ok {
		conn.WriteJSON(map[string]interface{}{
			"type": "petal_destroyed",
			"data": map[string]interface{}{
				"petal_id": petal.ID,
				"type":     petal.Type,
			},
		})
	}
}

func (p *Player) GetPetalsForSerialization() map[string]*Petal {
	if p.Petals == nil {
		return make(map[string]*Petal)
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	petalsCopy := make(map[string]*Petal)
	for id, petal := range p.Petals {
		petalsCopy[id] = &Petal{
			ID:        petal.ID,
			Type:      petal.Type,
			Health:    petal.Health,
			MaxHealth: petal.MaxHealth,
			X:         petal.X,
			Y:         petal.Y,
			IsActive:  petal.IsActive,
			// –ù–µ –∫–æ–ø–∏—Ä—É–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è
		}
	}
	return petalsCopy
}

func (g *Game) checkPetalHealing() {
	g.mu.Lock()
	defer g.mu.Unlock()

	now := time.Now()

	for _, player := range g.players {
		for _, petal := range player.Petals {
			if petal.CanHeal() && player.Health < player.MaxHealth {
				// –ò—Å—Ü–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
				player.Health += petal.HealAmount
				if player.Health > player.MaxHealth {
					player.Health = player.MaxHealth
				}

				petal.LastHeal = now

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ü–µ–ª–µ–Ω–∏–∏
				if conn, ok := g.connections[player.ID]; ok {
					conn.WriteJSON(map[string]interface{}{
						"type": "petal_healed",
						"data": map[string]interface{}{
							"petal_id": petal.ID,
							"amount":   petal.HealAmount,
							"health":   player.Health,
						},
					})
				}
			}
		}
	}
}
